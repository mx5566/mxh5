/**
 * 工具类
 * @author shao
 * @date   2017/08/16
 */
/**
 * 提供给渠道引入
 * @author shao
 * 
 * @date 2017/08/15
 */
(function($, window){

// 实用工具类
utils = function() {
};

// 浅复制对象
utils.prototype.extend = function(target, options) {
    if (target == undefined || target == null) {
        return options;
    } else {
        if (options) {
            for (var name in options) {
                target[name] = options[name];
            }
        }
        return target;
    }
};

/***************************** 判断机型 *********************************/
// 判断 iOS 机型
utils.prototype.isIOS = function() {
    return /iPhone|iPod|iPad|Mac/ig.test(navigator.userAgent);
};

// 判断 Android 机型
utils.prototype.isAndroid = function() {
    return /android|linux/i.test(navigator.userAgent);
};

// 判断是否是QQ环境
utils.prototype.isQQ = function () {
    return (navigator.userAgent.toLowerCase().match(/\bqq\b/i) == "qq");
};

// 判断是否是微信环境
utils.prototype.isWeixin = function () {
    return (navigator.userAgent.toLowerCase().match(/MicroMessenger/i) == "micromessenger");
};

// 判断是否是安卓设备
utils.prototype.isAndroid = function () {
    return navigator.userAgent.indexOf("Android") > -1 || navigator.userAgent.indexOf("Linux") > -1;
};

// 判断是否是IOS设备
utils.prototype.isiOS = function () {
    return !!navigator.userAgent.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/);
};

// 判断是否是PC微信环境
utils.prototype.isPCWeixin = function () {
    return (navigator.userAgent.toLowerCase().match(/WindowsWechat/i) == "windowswechat");
};

// 是否是移动设备
utils.prototype.isMobile = function () {
    var userAgent = navigator.userAgent.toLowerCase();
    var agents = ["android", "iphone", "symbianos", "windows phone", "ipad", "ipod"];
    for (var v = 0; v < agents.length; v++) {
        if (userAgent.indexOf(agents[v]) > 0) {
            return true;
        }
    }
    return false;
};
// 判断是否是safari浏览器
utils.prototype.isSafari = function () {
    return (navigator.userAgent.indexOf("Safari") > -1) && (navigator.standalone != undefined);
};

// 判断是否是主屏幕微端（ios）
utils.prototype.isDesktopApp = function () {
    return navigator.standalone && sdk.isiOS() && sdk.isMobile();
};


/***************************** url地址操作 *********************************/
// 获取 URL（不包含 ? 及后面的参数）
utils.prototype.getUrl = function() {
    if (location.origin && location.pathname) {
        return location.origin + location.pathname;
    } else {
        return location.href.match(/[^?#]+/i)[0];
    }
};

// 获取当前URL整个链接地址
utils.prototype.getCurUrl = function() {
    var url = location.href;
    return url;
};

// 获取当前url hostname
utils.prototype.getHostname = function() {
    var url = location.hostname;
    return url;
};

// 获取完整 URL（包含 ? 及后面的参数，不包含 # 和 ; 及后面的参数）
utils.prototype.getFullUrl = function() {
    return location.href.match(/[^#;]+/i)[0];
};

// 获取 Path（不包含 ? 及后面的参数）
utils.prototype.getPath = function() {
    if (location.pathname) {
        return location.pathname;
    } else {
        return location.href.match(/(?:http|https):\/\/[^\/]+([^?#;]+)/i)[1];
    }
};

// 获取 QueryString（?gameid=xpg&spid=uc）
utils.prototype.getQueryString = function() {
    return location.search;
};

// 获取 URL 参数
utils.prototype.getParameter = function(name) {
    var reg = new RegExp("[&?](" + name + ")=([^&?#]*)", "i");
    var r = window.location.search.match(reg);
    return r ? r[2] : null;
};

// 设置/替换 URL 参数
utils.prototype.setParameter = function(url, name, value) {
    url = url.replace(/(#.*)/ig, "");
    var reg = new RegExp("([\?&])" + name + "=([^&]*)(?=&|$)", "i");
    if (reg.test(url)) {
        return url.replace(reg, "$1" + name + "=" + value);
    } else {
        return url + (url.indexOf("?") == -1 ? "?" : "&") + name + "=" + value;
    }
};

// 移除 URL 参数
utils.prototype.removeParameter = function(url, name) {
    url = url.replace(/(#.*)/ig, "");
    var reg = new RegExp("([\?&])" + name + "=([^&]*)(?=&|$)", "i");
    if (reg.test(url)) {
        url = url.replace(reg, "");
        if (url.indexOf("?") == -1) url = url.replace("&", "?");
    }
    return url;
};

/**
 * 生成请求链接
 * 
 * @param  {[type]} url        链接地址
 * @param  {[type]} parameters 参数
 * @return {[type]}            地址
 */
utils.prototype.buildUrl = function(url, parameters){
    var qs = "";
    for(var key in parameters) {
        var value = parameters[key];
        qs += encodeURIComponent(key) + "=" + encodeURIComponent(value) + "&";
    }
    if (qs.length > 0){
        qs = qs.substring(0, qs.length-1); //chop off last "&"
        url = url + "?" + qs;
    }
    return url;
}
// 清空URL中的参数
utils.prototype.cleanURLVar = function (url) {
    if (url) {
        return url.split("?")[0];
    }
    return "";
};

/***************************** 字符串操作 *********************************/
// 判断字符串是否包含另一个字符串
utils.prototype.isStrContains = function(str, substr) {
    return new RegExp(substr).test(str);
}
 
// 返回 min - max 之间的随机整数
utils.prototype.getRandomInt = function(min, max) {
    return parseInt((Math.random() * (max - min + 1)) + min);
};

// 返回一个指定长度的随机字符串
utils.prototype.getRandomString = function(len) {
    var base = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    var str = "";
    for (var i=0; i<len; i++) {
        var n = this.getRandomInt(1, base.length) - 1;
        str += base.substr(n, 1);
    }
    return str;
};

/***************************** 本地存储操作 *********************************/
// 返回本地会话 ID
utils.prototype.getSessionId = function() {
    if (!sessionStorage.sessionid) {
        sessionStorage.sessionid = this.getRandomString(40);
    }
    return sessionStorage.sessionid;
};

// 设置本地存储
utils.prototype.setItem = function (key, value) {
    if (window.localStorage) {
        try {
            window.localStorage.setItem("07073_" + key, value);
        } catch (err) {
        }
    } else {
        var exp = new Date();
        exp.setTime(exp.getTime() + 365 * 24 * 60 * 60 * 1000);
        document.cookie = "07073_" + key + "=" + escape(value) + ";expires=" + exp.toGMTString();
    }
};

// 获取本地存储
utils.prototype.getItem = function (key) {
    if (window.localStorage) {
        return window.localStorage.getItem("07073_" + key);
    } else {
        var arr = document.cookie.match(new RegExp("(^| )07073_" + key + "=([^;]*)(;|$)"));
        if (arr != null) {
            return unescape(arr[2]);
        }
    }
    return null;
};

// 移除本地存储
utils.prototype.removeItem = function (key) {
    if (window.localStorage) {
        window.localStorage.removeItem("07073_" + key);
    } else {
        var exp = new Date();
        exp.setTime(exp.getTime() - 1);
        var cval = sdk.getItem(key);
        if (cval != null) {
            document.cookie = "07073_" + key + "=" + cval + ";expires=" + exp.toGMTString();
        }
    }
};

// 设置本地对话
utils.prototype.setSession = function (key, value) {
    if (window.sessionStorage) {
        window.sessionStorage.setItem("07073_" + key, value);
    }
};

// 获取本地对话
utils.prototype.getSession = function (key) {
    if (window.sessionStorage) {
        return window.sessionStorage.getItem("07073_" + key);
    }
    return null;
};

// 移除本地对话
utils.prototype.removeSession = function (key) {
    if (window.sessionStorage) {
        window.sessionStorage.removeItem("07073_" + key);
    }
};



// 设置cookie存储
utils.prototype.setCookieItem = function (key, value) {
    var exp = new Date();
    exp.setTime(exp.getTime() + 365 * 24 * 60 * 60 * 1000);
    document.cookie = "07073_" + key + "=" + escape(value) + ";expires=" + exp.toGMTString();
};

// 获取cookie存储
utils.prototype.getCookieItem = function (key) {
    var arr = document.cookie.match(new RegExp("(^| )07073_" + key + "=([^;]*)(;|$)"));
    if (arr != null) {
        return unescape(arr[2]);
    }
    return null;
};

// 移除cookie存储
utils.prototype.removeCookieItem = function (key) {
    var exp = new Date();
    exp.setTime(exp.getTime() - 1);
    var cval = sdk.getItem(key);
    if (cval != null) {
        document.cookie = "07073_" + key + "=" + cval + ";expires=" + exp.toGMTString();
    }
};

// 设置cookie存储
utils.prototype.setCustomCookieItem = function (key, value) {
    var exp = new Date();
    exp.setTime(exp.getTime() + 365 * 24 * 60 * 60 * 1000);
    document.cookie = "07073_" + key + "=" + escape(value) + ";path=/;expires=" + exp.toGMTString();
};

// 获取cookie存储
utils.prototype.getCustomCookieItem = function (key) {
    var arr = document.cookie.match(new RegExp("(^| )07073_" + key + "=([^;]*)(;|$)"));
    if (arr != null) {
        return unescape(arr[2]);
    }
    return null;
};

// 移除cookie存储
utils.prototype.removeCustomCookieItem = function (key) {
    var exp = new Date();
    exp.setTime(exp.getTime() - 1);
    var cval = sdk.getItem(key);
    if (cval != null) {
        document.cookie = "07073_" + key + "=" + cval + ";path=/;expires=" + exp.toGMTString();
    }
};


/***************************** http请求 *********************************/
// 异步加载 js，参数形式：url | [ url1, url2, .. ] , callback
utils.prototype.require = function(list, callback) {
    if (!list) return;
    if (typeof list == "string") list = [ list ];
    if (list.length == 0) {
        callback && callback.call(null);
        return;
    }
    var url = list.shift();
    var head = document.getElementsByTagName("head")[0] || document.documentElement;
    var node = document.createElement("script");
    var _this = this;
    node.addEventListener("load", function(e) {
        _this.require(list, callback);
    });
    node.addEventListener("error", function(e) {
        var message = "require fail on " + url;
        console.log(message);
    });
    node.async = true;
    node.src = url;
    head.appendChild(node);
};

// 创建一个iFrame
utils.prototype.createFrame = function (name, src) {
    if (!sdk.frames[name]) {
        sdk.frames[name] = document.createElement("iframe");
        sdk.frames[name].name = name;
        sdk.frames[name].src = src;
        sdk.frames[name].style.display = "none";
        document.body.appendChild(sdk.frames[name]);
    } else {
        sdk.frames[name].src = src;
    }
};

// 加载单个JS文件
utils.prototype.loadSingleScript = function (src, callback) {
    var node = document.createElement("script");
    node.src = src;
    if (node.hasOwnProperty("async")) {
        node.async = false;
    }
    node.addEventListener("load", function () {
        this.removeEventListener("load", arguments.callee, false);
        if (callback) {
            callback();
        }
    }, false);
    document.body.appendChild(node);
};

// 向DOM追加单个JS文件引用
utils.prototype.appendSingleScript = function (src, isBody) {
    var parentNode = document.getElementsByTagName(isBody ? "body" : "head").item(0);
    var node = document.createElement("script");
    node.type = "text/javascript";
    node.src = src;
    parentNode.appendChild(node);
};

// Ajax 请求，参数形式：ajax(url) | ajax(url, success) | ajax(options)
utils.prototype.ajax = function() {
    // 默认值
    var options = {
        method: "GET",
        url: "",
        data: null,
        type: "json",
        success: null
    };
    switch (arguments.length) {
        case 1:
            // ajax(url) 或 ajax(options)
            if (typeof arguments[0] == "string") options.url = arguments[0];
            if (typeof arguments[0] == "object") options = this.extend(options, arguments[0]);
            break;
        case 2:
            // ajax(url, success)
            options.url = arguments[0];
            options.success = arguments[1];
            break;
    }
    // 随机参数
    options.url = this.setParameter(options.url, "_", Math.random());
    new utilsAjax(options.method, options.url, options.data, options.type, options.success);
};

// JSONP 请求
utils.prototype.jsonp = function(url, data, jsonparam, success) {
    url = this.setParameter(url, "_", Math.random());
    new utilsJsonp(url, data, jsonparam, success).request();
};

// Ajax 类
utilsAjax = function(method, url, data, type, success) {
    this.xmlhttp = null;
    if (window.XMLHttpRequest) {
        this.xmlhttp = new XMLHttpRequest();
    }
    else {
        this.xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    this.type = type;
    this.success = success;
    this.xmlhttp.open(method, url, true);
    var _this = this;
    this.xmlhttp.onreadystatechange = function() {
        _this.callback.apply(_this);
    };
    if (typeof data == "object" && data != null) {
        var a = [];
        for (var p in data) {
            a.push(p + "=" + escape(data[p]));
        }
        data = a.join("&");
    }
    this.xmlhttp.send(data);
};

// Ajax 请求回调
utilsAjax.prototype.callback = function() {
    if (this.xmlhttp.readyState == 4 && this.xmlhttp.status == 200) {
        var data = null;
        switch (this.type) {
            case "text":
                data = this.xmlhttp.responseText;
                break;
            case "json":
                try {
                    data = JSON.parse(this.xmlhttp.responseText);
                }
                catch (e) {
                    data = this.xmlhttp.responseText;
                }
                break;
        }
        this.success && this.success.call(this.xmlhttp, data);
    }
};

// JSONP 类
utilsJsonp = function(url, data, jsonparam, success, timeout) {
    var finish = false;
    var theHead = document.getElementsByTagName("head")[0] || document.documentElement;
    var scriptControll = document.createElement("script");
    var jsonpcallback = "jsonpcallback" + (Math.random() + "").substring(2);
    var collect = function() {
        if (theHead != null) {
            theHead.removeChild(scriptControll);
            try {
                delete window[jsonpcallback];
            } catch (ex) { }
            theHead = null;
        }
    };
    var init = function() {
        scriptControll.charset = "utf-8";
        theHead.insertBefore(scriptControll, theHead.firstChild);
        window[jsonpcallback] = function(responseData) {
            finish = true;
            success(responseData);
        };
        jsonparam = jsonparam || "callback";
        if (url.indexOf("?") > 0) {
            url = url + "&" + jsonparam + "=" + jsonpcallback;
        } else {
            url = url + "?" + jsonparam + "=" + jsonpcallback;
        }
        if (typeof data == "object" && data != null) {
            for (var p in data) {
                url = url + "&" + p + "=" + escape(data[p]);
            }
        }
    };
    var timer = function() {
        if (typeof window[jsonpcallback] == "function") {
            collect();
        }
        if (typeof timeout == "function" && finish == false) {
            timeout();
        }
    };
    this.request = function() {
        init();
        scriptControll.src = url;
        window.setTimeout(timer, 10000);
    };
};


var vcity = { 11:"北京",12:"天津",13:"河北",14:"山西",15:"内蒙古",
    21:"辽宁",22:"吉林",23:"黑龙江",31:"上海",32:"江苏",
    33:"浙江",34:"安徽",35:"福建",36:"江西",37:"山东",41:"河南",
    42:"湖北",43:"湖南",44:"广东",45:"广西",46:"海南",50:"重庆",
    51:"四川",52:"贵州",53:"云南",54:"西藏",61:"陕西",62:"甘肃",
    63:"青海",64:"宁夏",65:"新疆",71:"台湾",81:"香港",82:"澳门",91:"国外"
};

utils.prototype.checkCard = function(card)
{
    var _this = this;
    //是否为空
    if(card === '')
    {
//                              alert('请输入身份证号，身份证号不能为空');
        return false;
    }
    //校验长度，类型
    if(_this.isCardNo(card) === false)
    {
//                              alert('您输入的身份证号码不正确，请重新输入');
        return false;
    }
    //检查省份
    if(_this.checkProvince(card) === false)
    {
//                              alert('您输入的身份证号码不正确,请重新输入');
        return false;
    }
    //校验生日
    if(_this.checkBirthday(card) === false)
    {
//                              alert('您输入的身份证号码生日不正确,请重新输入');
        return false;
    }
    //检验位的检测
    if(_this.checkParity(card) === false)
    {
//                              alert('您的身份证校验位不正确,请重新输入');
        return false;
    }
    return true;
};


//检查号码是否符合规范，包括长度，类型
utils.prototype.isCardNo = function(card)
{
    //身份证号码为15位或者18位，15位时全为数字，18位前17位为数字，最后一位是校验位，可能为数字或字符X
    var reg = /(^\d{15}$)|(^\d{17}(\d|X)$)/;
    if(reg.test(card) === false)
    {
        return false;
    }

    return true;
};

//取身份证前两位,校验省份
utils.prototype.checkProvince = function(card)
{
    var province = card.substr(0,2);
    if(vcity[province] == undefined)
    {
        return false;
    }
    return true;
};

//检查生日是否正确
utils.prototype.checkBirthday = function(card)
{
    var _this = this;
    var len = card.length;
    //身份证15位时，次序为省（3位）市（3位）年（2位）月（2位）日（2位）校验位（3位），皆为数字
    if(len == '15')
    {
        var re_fifteen = /^(\d{6})(\d{2})(\d{2})(\d{2})(\d{3})$/;
        var arr_data = card.match(re_fifteen);
        var year = arr_data[2];
        var month = arr_data[3];
        var day = arr_data[4];
        var birthday = new Date('19'+year+'/'+month+'/'+day);
        return _this.verifyBirthday('19'+year,month,day,birthday);
    }
    //身份证18位时，次序为省（3位）市（3位）年（4位）月（2位）日（2位）校验位（4位），校验位末尾可能为X
    if(len == '18')
    {
        var re_eighteen = /^(\d{6})(\d{4})(\d{2})(\d{2})(\d{3})([0-9]|X)$/;
        var arr_data = card.match(re_eighteen);
        var year = arr_data[2];
        var month = arr_data[3];
        var day = arr_data[4];
        var birthday = new Date(year+'/'+month+'/'+day);
        return _this.verifyBirthday(year,month,day,birthday);
    }
    return false;
};

//校验日期
utils.prototype.verifyBirthday = function(year,month,day,birthday)
{
    var now = new Date();
    var now_year = now.getFullYear();
    //年月日是否合理
    if(birthday.getFullYear() == year && (birthday.getMonth() + 1) == month && birthday.getDate() == day)
    {
        //判断年份的范围（3岁到100岁之间)
        var time = now_year - year;
        if(time >= 17 && time <= 100)
        {
            return true;
        }
        return false;
    }
    return false;
};

//校验位的检测
utils.prototype.checkParity = function(card)
{
    var _this = this;
    //15位转18位
    card = _this.changeFivteenToEighteen(card);
    var len = card.length;
    if(len == '18')
    {
        var arrInt = new Array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2);
        var arrCh = new Array('1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2');
        var cardTemp = 0, i, valnum;
        for(i = 0; i < 17; i ++)
        {
            cardTemp += card.substr(i, 1) * arrInt[i];
        }
        valnum = arrCh[cardTemp % 11];
        if (valnum == card.substr(17, 1))
        {
            return true;
        }
        return false;
    }
    return false;
};

//15位转18位身份证号
utils.prototype.changeFivteenToEighteen = function(card)
{
    if(card.length == '15')
    {
        var arrInt = new Array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2);
        var arrCh = new Array('1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2');
        var cardTemp = 0, i;
        card = card.substr(0, 6) + '19' + card.substr(6, card.length - 6);
        for(i = 0; i < 17; i ++)
        {
            cardTemp += card.substr(i, 1) * arrInt[i];
        }
        card += arrCh[cardTemp % 11];
        return card;
    }
    return card;
};

// 检查手机号
utils.prototype.checkPhone = function(phone)
{
    // 手机号
    var reg = /^1(\d{10}$)/;
    if(reg.test(phone) === false)
    {
        return false;
    }

    return true;
};


window.utils07073 = new utils();

})(jQuery, window);